
const char * usage =
"                                                               \n"
"myhttpd:                                                \n"
"                                                               \n"
"Simple server program that shows how to use socket calls       \n"
"in the server side.                                            \n"
"                                                               \n"
"To use it in one window type:                                  \n"
"                                                               \n"
"   myhttpd <port>                                       \n"
"                                                               \n"
"Where 1024 < port < 65536.             \n"
"                                                               \n"
"In another window type:                                       \n"
"                                                               \n"
"   telnet <host> <port>                                        \n"
"                                                               \n"
"where <host> is the name of the machine where myhttpd  \n"
"is running. <port> is the port number you used when you run   \n"
"myhttpd.                                               \n"
"                                                               \n"
"Then type your name and return. You will get a greeting and   \n"
"the time of the day.                                          \n"
"                                                               \n";


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <time.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/wait.h>
#include <string>
#include <pthread.h>

#define MAXL 4096


void *threadProcessRequest(void* ptr);
void processRequest(int socket);
void poolSlave(int socket);

int QueueLength = 5;

const char* html_header = "HTTP/1.1 200 Document follows\r\nServer: MyHttpdServer\r\nContent-type: text/html\r\n\r\n";
const char* gif_head = "HTTP/1.1 200 Document follows\r\nServer: MyHttpdServer\r\nContent-type: image/gif\r\n\r\n";
const char* jpg_head = "HTTP/1.1 200 Document follows\r\nServer: MyHttpdServer\r\nContent-type: image/jpg\r\n\r\n";
const char* txt_head = "HTTP/1.1 200 Document follows\r\nServer: MyHttpdServer\r\nContent-type: text/plain\r\n\r\n";

int main( int argc, char ** argv )
{
  // Print usage if not enough arguments
  if ( argc < 2 ) {
    fprintf( stderr, "%s", usage );
    exit( -1 );
  }

  char mode = ' ';
  int port;
  
  // Get the port from the arguments
  if ( argv[1][0] != '-' ) {
  	port = atoi( argv[1] );
  } else {
    port = atoi(argv[2]);
    mode = argv[1][1];
    if (mode != 'f' && mode != 't' && mode != 'p') {
        fprintf( stderr, "%s", usage);
        exit(-1);
    }
  }

  // Set the IP address and port for this server
  struct sockaddr_in serverIPAddress; 
  memset( &serverIPAddress, 0, sizeof(serverIPAddress) );
  serverIPAddress.sin_family = AF_INET;
  serverIPAddress.sin_addr.s_addr = INADDR_ANY;
  serverIPAddress.sin_port = htons((u_short) port);
  
  // Allocate a socket
  int masterSocket =  socket(PF_INET, SOCK_STREAM, 0);
  if ( masterSocket < 0) {
    perror("socket");
    exit( -1 );
  }

  // Set socket options to reuse port. Otherwise we will
  // have to wait about 2 minutes before reusing the sae port number
  int optval = 1; 
  int err = setsockopt(masterSocket, SOL_SOCKET, SO_REUSEADDR, 
		       (char *) &optval, sizeof( int ) );
   
  // Bind the socket to the IP address and port
  int error = bind( masterSocket,
		    (struct sockaddr *)&serverIPAddress,
		    sizeof(serverIPAddress) );
  if ( error ) {
    perror("bind");
    exit( -1 );
  }
  
  // Put socket in listening mode and set the 
  // size of the queue of unprocessed connections
  error = listen( masterSocket, QueueLength);
  if ( error ) {
    perror("listen");
    exit( -1 );
  }

  int pid;
  while ( 1 ) {
    // Accept incoming connections
    struct sockaddr_in clientIPAddress;
    int alen = sizeof( clientIPAddress );
    int slaveSocket = accept( masterSocket,
			      (struct sockaddr *)&clientIPAddress,
			      (socklen_t*)&alen);
		
    if ( slaveSocket < 0 ) {
      perror( "accept" );
      exit( -1 );
    }

    switch (mode) {
	case ' ':
	    processRequest(slaveSocket);
	    close( slaveSocket);
	    break;
	case 'f': 
	   (void) signal(SIGCHLD, SIG_IGN);
	    pid = fork();
	    if ( pid < 0 ) {
		perror( "fork" );
	    } else if ( pid == 0 ) {
		processRequest(slaveSocket);
    		close( slaveSocket );
		exit(0);
	    }
	    close(slaveSocket);
	    break;
	case 't': {
	    pthread_attr_t attr;
	    pthread_t thr;
	    int *param = (int *) malloc(sizeof(*param));
	    
	    pthread_attr_init( &attr );
	    pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);

	    *param = slaveSocket;
	    pthread_create( &thr, &attr, threadProcessRequest, (void*)param );
	    break;
	}
	case 'p':
	    pthread_t tid[5];
	    pthread_attr_t attr;
	    pthread_attr_init( &attr );
	    pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	    
	    for(int i=0; i<5; i++) 
	    { 
		pthread_create(&tid[i], &attr, (void*(*)(void*))poolSlave, (void*)masterSocket); 
	    }
	    
	    pthread_join(tid[0], NULL);
	    
	    break;
    }
  }
}

void poolSlave(int socket)
{
    while(1) {
	struct sockaddr_in clientIPAddress;
	int alen = sizeof( clientIPAddress );
	int slaveSocket = accept( socket,
			      (struct sockaddr *)&clientIPAddress,
			      (socklen_t*)&alen);

	processRequest(slaveSocket); 
	close(slaveSocket); 
    } 
}

bool
hasSuffix(char* str, char* ending) {
    int len = strlen(str);
    int endlen = strlen(ending);
	
    if ( endlen > len ) return false;
	
    int i;
    for ( i = 0; i < endlen; i++ ) {
	if ( str[len-i-1] != ending[endlen-i-1] ) return false; 
    }

    return true;
}

bool isCGIBIN (char* docPath) {
    if (docPath == NULL) return false;
    if (strstr(docPath, "/cgi-bin/") == docPath) return true;
    return false;
}

void *threadProcessRequest(void * ptr) {
    int socket = *((int*)ptr);
    processRequest(socket);
    close(socket);
    free(ptr);
}

void processRequest ( int socket ) {

    unsigned char newChar;
    unsigned char oldChar = 0;
    char requestString  [ MAXL + 1 ];
    int length = 0;
    int gotGet = 0;
    int clcr = 0;
    int n = 0;


    while(n = read(socket, &newChar, sizeof(newChar))) {
	//printf("%c(%d)", newChar,newChar);
	if (newChar != '\n' && newChar != '\r') {
	    clcr = 0;
	}
    	if (newChar == '\n' && oldChar == '\r') {
	    clcr++;
	    //printf("%s %s %d %d\n", __FILE__, __func__, __LINE__, clcr);
	    if (clcr == 2) break;
	}
	oldChar = newChar;
	requestString[length++] = newChar;
    }
    //puts("Break");

    if ( requestString[0] == '\0' ) return;

    char* currToken = strtok(requestString, " ");
    //printf("%s\n", currToken);
    if ( strcmp(currToken, "GET") ) {
	write(socket, "400 Bad Request\n", 16);
	return;
    }

    char* docpath = strtok(NULL, " ");

    //printf("%s\n", docpath);
    char fullpath [ MAXL ]  = {0};

    getcwd(fullpath, MAXL);

    if ( isCGIBIN(docpath) ) {
	const char* head = "HTTP/1.0 Document follows\r\nServer: MyHttpdServer\r\n";
	strcat(fullpath, "/http-root-dir");
	strcat(fullpath, docpath);

	//printf("%s %d %s\n", __FILE__, __LINE__, fullpath);

	int savestdout = dup(1);
	char* args[256] = {0};
	int cnt = 0;
	args[0] = strtok(fullpath, "?");
	while ( args[cnt] != NULL ) {
	    cnt++;
	    args[cnt] = strtok(NULL, "&");
	} 

	printf("%s, %d\n",args[0], cnt);

	args[cnt] = NULL;
	int ret;
	(void) signal(SIGCHLD, SIG_IGN);
	ret = fork();
	if ( ret == 0 ) { 
	    write(socket, head, strlen(head));
	    dup2(socket,1);	
	    execvp(args[0],args);
	} 
	else if (ret <= 0 ) { 
	    perror( "fork" );
	    exit(0);
	} else 
	    return;
    } else {
	strcat(fullpath, "/http-root-dir");
	if (strstr(docpath, "/icons") == docpath) {
	    strcat(fullpath, docpath);
	} else if (strstr(docpath, "/htdocs") == docpath) {
	    strcat(fullpath, docpath);
	} else {
	    if (!strcmp(docpath, "/"))
		strcat(fullpath, "/htdocs/index.html");
	    else {
		strcat(fullpath, "/htdocs");
		strcat(fullpath, docpath);
	    } 	
	}
	
	printf("*** %s %s\n", docpath, fullpath);

	int file = open(fullpath, O_RDONLY);
	if ( file  == -1 ) {
	    perror("open");
	    write(socket,"404\n",4);
	}
	else {
	    if (hasSuffix(fullpath, ".gif")) write(socket, gif_head, strlen(gif_head));
	    else if (hasSuffix(fullpath, ".jpg")) write(socket, jpg_head, strlen(jpg_head));
	    else if (hasSuffix(fullpath, ".txt")) write(socket, txt_head, strlen(txt_head));
	    else {
		printf("%s\n", html_header);
		write(socket, html_header, strlen(html_header));
	    }

	    int count;
	    void* buffer = malloc(1);
	    while(count = read(file, buffer, 1)) {
		if ( write(socket, buffer, 1) != count ) {
		    perror("write");
		    break;
		}
	    }
	    free(buffer);
	}

	close(file);
    }
}



/*void
processTimeRequest( int fd )
{
  // Buffer used to store the name received from the client
  const int MAXL = 1024;
  char name[ MAXL + 1 ];
  int nameLength = 0;
  int n;

  // Send prompt
  const char * prompt = "\nType your name:";
  write( fd, prompt, strlen( prompt ) );

  // Currently character read
  unsigned char newChar;

  // Last character read
  unsigned char lastChar = 0;

  //
  // The client should send <name><cr><lf>
  // Read the name of the client character by character until a
  // <CR><LF> is found.
  //
    
  while ( nameLength < MAXL &&
	  ( n = read( fd, &newChar, sizeof(newChar) ) ) > 0 ) {

    if ( lastChar == '\015' && newChar == '\012' ) {
      // Discard previous <CR> from name
      nameLength--;
      break;
    }

    name[ nameLength ] = newChar;
    nameLength++;

    lastChar = newChar;
  }

  // Add null character at the end of the string
  name[ nameLength ] = 0;

  printf( "name=%s\n", name );

  // Get time of day
  time_t now;
  time(&now);
  char	*timeString = ctime(&now);

  // Send name and greetings
  const char * hi = "\nHi ";
  const char * timeIs = " the time is:\n";
  write( fd, hi, strlen( hi ) );
  write( fd, name, strlen( name ) );
  write( fd, timeIs, strlen( timeIs ) );
  
  // Send the time of day 
  write(fd, timeString, strlen(timeString));

  // Send last newline
  const char * newline="\n";
  write(fd, newline, strlen(newline));
  
}*/
